#!/usr/bin/env php
<?php
// parse command line arguments
$opts = getopt("hlbfpeu:c:i:", array('help', 'build', 'force', 'push', 'list', 'export:', 'image:')); // , 'markAsBuild'
$optsSame = [
    'help' => 'h',
    'export' => 'e',
    'build' => 'b',
    'force' => 'f',
    'push' => 'p',
    'list' => 'l',
    'image' => 'i',
    'user' => 'u'
];
function help()
{
    $a = array(
        ['-h, --help', 'print this help text'],
        ['-c <config file>', 'load additional config file(s)'],
        ['-i <image name>, --image <image name>', 'list images to process, dot will build Dockerfile in current folder'],
        ['-l, --list', 'print images to be processed'],
        ['-e <dot file>, --export <dot file>', 'print this help text'],
        ['-b, --build', 'build registered images or only image specified as value'],
        ['-p, --push', 'push registered images or only image specified as value'],
        ['-f, --force', 'force build of registered images'],
        ['-u, --user', 'default user name prefixing image names'],
    );

    DockerBuilder::printOut("Usage: build [OPTION]...");
    DockerBuilder::printOut();
    foreach ($a as $b) {
        DockerBuilder::printOut("  $b[0]\t$b[1]");
    }

}

if (false === $opts) {
    help();
    exit(1);
}
foreach ($optsSame as $k => $v) {
    if (array_key_exists($k, $opts)) {
        $opts[$v] = $opts[$k];
        unset($opts[$k]);
    }
}
if (array_key_exists('h', $opts)) {
    help();
    exit(0);
}

// load INI files
// TODO load multiple INI files
$startedInFolder = getcwd();
if (!file_exists('build.ini')) {
    chdir(dirname(__FILE__));
}
$cfg = parse_ini_file('build.ini');

$builder = DockerBuilder::factory();
foreach ($cfg as $section => $def) {
    if (!is_array($def)) {
        $def = explode(' ', $def);
    }
    foreach ($def as $k => $v) {
        switch ($section) {
            case 'root':
                $builder->addRootFolder(DockerBuilder::fixPath($k), $v);
                break;
            case 'repository':
                $builder->addRepository($k, $v);
                break;
            case 'add':
                if ($k === '*') {
                    $builder->addAll();
                } else {
                    if ($v === '*') {
                        $builder->addUpTo($k);
                    } else {
                        $builder->add($k);
                    }
                }
                break;
            case 'limit':
                if (!array_key_exists('i', $opts)) {
                    $opts['i'] = [];
                }
                if (!is_array($opts['i'])) {
                    $opts['i'] = [$opts['i']];
                }
                $opts['i'][] = $v;
                break;
            case 'action':
                switch ($k) {
                    case 'build':
                        if ($v) {
                            $opts['b'] = true;
                        }
                        if ($v === 'force') {
                            $opts['f'] = true;
                        }
                        break;
                    case 'push':
                        if ($v) {
                            $opts['p'] = true;
                        }
                        break;
                    case 'list':
                        if ($v) {
                            $opts['l'] = true;
                        }
                        break;
                    case 'export':
                        $opts['e'] = $v;
                        break;
                }
                break;
            case 'freeze':
                $builder->addFrozenImage($v);
                break;
            case 'user':
                $builder->setDefaultUser($v);
                break;
            default:
                DockerBuilder::info("ignoring key '$section'");
        }
    }
}

// execute command line actions
$builder->setForceFlag(array_key_exists('f', $opts));

if (array_key_exists('i', $opts)) {
    /** limit to images */
    if (!is_array($opts['i'])) {
        $opts['i'] = [$opts['i']];
    }
    $builder->clear();

    if ($opts['i'][0] === '.') {
        // limit to current folder name if there is Dockerfile
        $builder->add(basename($startedInFolder));
    } else {
        foreach ($opts['i'] as $image) {
            $builder->add($image);
        }
    }
}

if (array_key_exists('e', $opts)) {
    /** it is possible to generated dot file for http://www.graphviz.org/  */
    $builder->toDot($opts['e']);
}

if (array_key_exists('l', $opts)) {
    /** list images loaded from registered roots  */
    $builder->listImages();
}

if (array_key_exists('b', $opts)) {
    /** build **/
    $builder->build();
    //$builder->markAsBuild();
//
}

if (array_key_exists('p', $opts)) {
    /** push **/
    $builder->push();
}


DockerBuilder::info("done.");


/////////////////////////////////////////////////////////////
class DockerBuilder
{
    const INFO_FILE = '.builderInfo';
    private static $_instance;
    private $_images = [];
    private $_frozen = [];
    private $_repos = [];
    private $_tempDir = false;
    private $_tempNames = [];
    private $_readyToProcess = [];
    private $_forceBuild = false;
    private $_prefix = "";

    public static function factory($tempFolder = false)
    {
        self::$_instance = new DockerBuilder();
        if ($tempFolder) {
            self::$_instance->setTempFolder($tempFolder);
        }
        return self::$_instance;
    }

    private function __construct()
    {
        $this->_tempDir = sys_get_temp_dir();
    }

    public static function fixPath($path)
    {
        if (0 === strpos($path, '~')) {
            $path = getenv('HOME') . DIRECTORY_SEPARATOR . substr($path, 1);
        }
        return $path;
    }

    public static function printOut($string = '')
    {
        echo $string . PHP_EOL;
    }


    public static function warn($string)
    {
        echo "W: $string" . PHP_EOL;
    }

    public static function info($string)
    {
        echo "I: $string" . PHP_EOL;
    }


    function __destruct()
    {
        // make sure we remove all temporary names generated
        foreach ($this->_tempNames as $fn) {
            @unlink($fn);
        }
    }

    function setTempFolder($tmpFolder)
    {
        $this->_tempDir = $tmpFolder;
    }

    public static function getTempName($ext)
    {
        $fn = tempnam(self::$_instance->_tempDir, '') . $ext;
        self::$_instance->_tempNames[] = $fn;
        return $fn;
    }

    function addRootFolder($folder, $user)
    {
        foreach (array_filter(glob($folder . '/*'), 'is_dir') as $dir) {
            $this->_images[$user . DIRECTORY_SEPARATOR . basename($dir)] = $dir;
        }

    }

    function addRepository($alias, $repo)
    {
        $this->_repos[$alias] = $repo;
    }

    public static function getRepository($alias)
    {
        if (array_key_exists($alias, self::$_instance->_repos)) {
            return self::$_instance->_repos[$alias];
        } else {
            return false;
        }
    }

    function addFrozenImage($imageName)
    {
        $this->_frozen[$imageName] = true;
    }

    function addAll()
    {
        foreach ($this->_images as $imageName => $dir) {
            $this->add($imageName);
        }
    }

    function addUpTo($imageName)
    {
        $images = [];
        while ($this->hasImage($imageName) && !$this->isFrozen($imageName)) {
            $dockerFile = $this->_getDockerFile($imageName);
            if ($dockerFile) {
                $this->add($dockerFile);
                $imageName = $dockerFile->getParent();
            }
        };
    }

    function clear()
    {
        $this->_readyToProcess = array();
    }

    function add($imageName)
    {
        if (is_object($imageName)) {
            $dockerFile = $imageName;
            $imageName = $imageName->getName();
        } else {
            $dockerFile = false;
            if (false === strpos($imageName, '/')) {
                $imageName = $this->_prefix . '/' . $imageName;
            }
        }
        if (!array_key_exists($imageName, $this->_readyToProcess)) {
            try {
                $dockerFile = $dockerFile ? $dockerFile : $this->_getDockerFile($imageName);
            } catch (DockerException $ex) {
//                DockerBuilder::warn("skipping image '$imageName': " . $ex->getMessage());
                $dockerFile = false;
            }
            if ($dockerFile) {
                $this->_readyToProcess[$imageName] = $dockerFile->getParent();
            } else {
                DockerBuilder::warn("skipping image '$imageName': not found");
            }
        }
    }

    function build()
    {
        foreach ($this->getFlatImageList() as $imageName) {
            $dockerFile = $this->_getDockerFile($imageName);
            $dockerFile->build($this->_forceBuild);
        }
    }

    function getTreeImageList()
    {
        $tree = $this->_getSanitizedList();

        // treeze the array - http://stackoverflow.com/questions/4196157/create-array-tree-from-array-list
        $parent_key = 'p';
        $children_key = 'c';
        $orphans = true;
        while ($orphans) {
            $orphans = false;
            foreach ($tree as $k => $v) {
                // is there $a[$k] sons?
                $sons = false;
                foreach ($tree as $x => $y)
                    if (isset($y[$parent_key]) and $y[$parent_key] != false and $y[$parent_key] == $k) {
                        $sons = true;
                        $orphans = true;
                        break;
                    }

                // $a[$k] is a son, without children, so i can move it
                if (!$sons and isset($v[$parent_key]) and $v[$parent_key] != false) {
                    $tree[$v[$parent_key]][$children_key][$k] = $v;
                    unset($tree[$k]);
                }
            }
        }

        return $tree;
    }

    function getFlatImageList()
    {
        // flatten tree into correctly ordered list
//        $tree = $this->getTreeImageList();
        $tree = $this->_getSanitizedList();

        // flatten tree
        return $this->_getChildrenFor($tree, null);
    }

    private function _getSanitizedList()
    {
        $tree = $this->_readyToProcess;

        // remove frozen images
        foreach ($tree as $imageName => $parent) {
            if (array_key_exists($imageName, $this->_frozen)) {
                unset($tree[$imageName]);
            }
        }

        // clear references to unknown parents
        foreach ($tree as $imageName => $parent) {
            if (!array_key_exists($parent->getName(), $tree)) {
                $tree[$imageName] = ['p' => null, 'c' => []];
            } else {
                $tree[$imageName] = ['p' => $parent->getName(), 'c' => []];
            }
        }

        return $tree;
    }

    protected function _getChildrenFor(&$tree, $forParent)
    {
        $images = [];
        foreach ($tree as $imageName => $parent) {
            $parent = is_object($parent) ? $parent->getName() : $parent;
            if ($parent['p'] === $forParent) {
                // TODO could be optimized by removing processed items from $tree
                $images = array_merge($images, [$imageName], $this->_getChildrenFor($tree, $imageName));
            }
        }

        return $images;
    }

    function push()
    {
        foreach ($this->getFlatImageList() as $imageName) {
            $dockerFile = $this->_getDockerFile($imageName);
            $dockerFile->push();
        }
    }

    public static function getDockerFile($imageName)
    {
        return self::$_instance->_getDockerFile($imageName);
    }

    protected function _getDockerFile($imageName)
    {
        if (!is_object($imageName)) {
            $imageName = new ImageName($imageName);
        }
        // locate folder
        if (!$this->hasImage($imageName)) {
            throw new DockerException("build folder for image '$imageName' not found");
        }

        // create object
        return new DockerFile($this->_images[$imageName->getName()], $imageName->getName());
    }

    function hasImage($imageName)
    {
        if (!is_object($imageName)) {
            $imageName = new ImageName($imageName);
        }

        return array_key_exists($imageName->getName(), $this->_images);
    }

    function isFrozen($imageName)
    {
        if (!is_object($imageName)) {
            $imageName = new ImageName($imageName);
        }

        return array_key_exists($imageName->getName(), $this->_frozen);
    }

    public function markAsBuild()
    {
        foreach ($this->getFlatImageList() as $imageName) {
            $dockerFile = $this->_getDockerFile($imageName);
            $dockerFile->setCachedTs();
        }
    }

    public function toDot($fileName)
    {
        // generate dot file
        $fileName = DockerBuilder::fixPath($fileName);

        $l = [];
        $l[] = <<<EOF
digraph images {
    size="36,36";
    node [color=grey, style=filled];
	node [fontname="Verdana", size="30,30"];
    graph [ fontname = "Arial",
        fontsize = 36,
            style = "bold",
            label = "\nto date: November 30th, 2008\n",
        ssize = "30,60"
    ];
EOF;

        foreach ($this->_getSanitizedList() as $imageName => $parent) {
            if ($parent['p']) {
                $l[] = "\t\"$parent[p]\" -> \"$imageName\"";
            } else {
                // TODO get one more parent
                $l[] = "\t\"$imageName\"";
            }
        }
        $l[] = '}';

        $l = implode("\n", $l);
        file_put_contents($fileName, $l);
        $tmp = substr($fileName, 0, -strlen(pathinfo($fileName, PATHINFO_FILENAME))) . '.gif';
        DockerBuilder::info("dot -Tgif -Goverlap=false -o $tmp $fileName");
    }

    public function listImages()
    {
        self::printOut("** image list");
        foreach ($this->_getSanitizedList() as $imageName => $parent) {
            $sep = str_repeat(' ', 50 - strlen($imageName));
            if ($parent['p']) {
                self::printOut("$imageName $sep<- $parent[p]");
            } else {
                // get parent from Dockerfile
                $dockerFile = DockerBuilder::getDockerFile($imageName);
                $parent = $dockerFile->getParent()->getName();
                self::printOut("$imageName $sep|- $parent");
            }
        }
    }

    public function setForceFlag($force)
    {
        $this->_forceBuild = $force;
    }

    public function setDefaultUser($user)
    {
        $this->_prefix = $user;
    }
}

class DockerFile
{
    private $_name;
    private $_folder;
    /**
     * @var ImageName
     */
    private $_parent;
    private $_wantedLayersbuildMethod = 'build';
    private $_repoAliases;
    private $_pushTagFrom;

    public function __construct($imageFolder, $imageName)
    {
        $this->_folder = $imageFolder;
        $this->_name = $imageName;

        $this->readBuildMeta();
    }

    public function readBuildMeta()
    {
        if (!file_exists($this->_getDockerfilePath())) {
            throw new DockerException("missing file " . $this->_getDockerfilePath());
        }
        $s = file_get_contents($this->_getDockerfilePath());
        if (!preg_match('/^FROM (.*)$/m', $s, $m)) {
            throw new DockerException("FROM not found");
        }
        $this->_parent = new ImageName($m[1]);

        if (preg_match('/^#BUILD_METHOD=(.+)$/m', $s, $m)) {
            $this->_wantedLayersbuildMethod = $m[1];
        }

        if (preg_match('/^#BUILD_PUSH=(.+)$/m', $s, $m)) {
            $this->_repoAliases = explode(',', $m[1]);
        } else {
            $this->_repoAliases = [];
        }

        if (preg_match('/^#BUILD_PUSH_TAG_FROM=(.+)$/m', $s, $m)) {
            $this->_pushTagFrom = $m[1];
        }
    }

    public function getParent()
    {
        return $this->_parent;
    }

    public function getWantedLayers()
    {
        return $this->_wantedLayersbuildMethod;
    }

    public function build($force = false)
    {
        // get timestamp a while before sending context to Docker
        $stamp = $this->getStampInfo();
        $ts = null;
        $parentStamp = null;

        // evaluate if we need to build the image based on information we know
        if (!$force) {
            if (false !== $stamp['ts']) {
                $ts = $this->getContextTs();
                if ($ts == $stamp['ts']) {
                    // let us check also parent
                    $parentStamp = $this->getParentStamp();
                    if ($parentStamp === $stamp['parent']) {
                        // nothing to rebuild
                        return;
                    }
                }
            }
        }
        $stamp['ts'] = $ts ? $ts : $this->getContextTs();
        $stamp['parent'] = $parentStamp ? $parentStamp : $this->getParentStamp();

        $name = escapeshellarg($this->_name);
        $folder = escapeshellarg($this->_folder . DIRECTORY_SEPARATOR);
        $nocache = $force ? '--no-cache' : '';

        $stars = str_repeat("*", strlen($name) + 19);
        DockerBuilder::printOut($stars);
        DockerBuilder::printOut("* building $name image *");
        DockerBuilder::printOut($stars);


        if (file_exists($this->_folder . '/Dockerfile.before.sh')) {
            $cwd = getcwd();
            chdir($this->_folder);
            $this->_exec("./Dockerfile.before.sh");
            chdir($cwd);
        }

        switch ($this->getWantedLayers()) {
            case "single":
                // test only: this will miss all Docker directives
                // single layer
                $nameFlat = escapeshellarg($this->_name . "-flat");
                $this->_exec("docker build $nocache -t $name $folder");
                $tmpFn = DockerBuilder::getTempName('.tar.gz');
                $this->_exec("docker run --rm -i $name tar zpc --exclude=/etc/hostname --exclude=/etc/resolv.conf --exclude=/etc/hosts --one-file-system / > $tmpFn");
                $this->_exec("docker rmi $name || true");
                $this->_exec("docker import - $nameFlat < " . escapeshellarg($tmpFn));
                unlink($tmpFn);
                if (file_exists($this->_folder . '/Dockerfile.post-flat')) {
                    $postFlatFile = "$this->_folder/Dockerfile.post-flat";
                } else {
                    die("TODO use docker inspect --format='{{json .config}}' to build Dockerfile.post-flat file");
                }

                $postFlatFile = escapeshellarg($postFlatFile);
                $this->_exec("docker build -t $name -f $postFlatFile $folder");
                $this->_exec("docker rmi $nameFlat");
                break;
            case "docker-squash":
                // very little improvement, requires sudo, requires external tool - see https://github.com/jwilder/docker-squash
                $this->_exec("docker build $nocache -t $name $folder");
                $this->_exec("docker save $name | sudo docker-squash | docker load");
                break;
            case "compile":
                // use FROM image and optimize Dockerfile to create 1 additional layer
                throw new DockerException("compile not implemented");
                break;
            case "build":
                // normal docker build
                $this->_exec("docker build $nocache -t $name $folder");
                break;
            default:
                throw new DockerException("unknown build method: " . $this->getWantedLayers());
        }

        if (file_exists($this->_folder . '/Dockerfile.after.sh')) {
            $cwd = getcwd();
            chdir($this->_folder);
            $this->_exec("./Dockerfile.after.sh");
            chdir($cwd);
        }

        // write time stamp
        $this->setStampInfo($stamp);
    }

    public function setCachedTs($ts)
    {
        if ($ts === false || is_null($ts)) {
            $ts = $this->getContextTs();
        }
        $buildTsFn = $this->_folder . DIRECTORY_SEPARATOR . DockerBuilder::INFO_FILE;
        file_put_contents($buildTsFn, $ts);
    }

    public function getCachedTs()
    {
        $buildTsFn = $this->_folder . DIRECTORY_SEPARATOR . DockerBuilder::INFO_FILE;
        return file_exists($buildTsFn) ? file_get_contents($buildTsFn) : false;
    }

    private function getParentStamp()
    {
        // TODO in v2 we should use digest
        $img = exec('docker images --no-trunc --digests -q ' . $this->getParent()->getName());
        return $img;
//        try {
//            $dockerFile = DockerBuilder::getDockerFile($this->getParent());
//        } catch (Exception $ex) {
//            $dockerFile = null;
//        }
//        if ($dockerFile) {
//            $info = BuilderInfo::load($dockerFile->_folder . DIRECTORY_SEPARATOR . DockerBuilder::INFO_FILE);
//            return $info->ts;
//        }
//
//        return null;
    }

    private function getStampInfo()
    {
        $info = BuilderInfo::load($this->_folder . DIRECTORY_SEPARATOR . DockerBuilder::INFO_FILE);
        return [
            'ts' => $info->ts,
            'parent' => $info->parent,
        ];
    }

    private function setStampInfo($stamp)
    {
        BuilderInfo::update($this->_folder . DIRECTORY_SEPARATOR . DockerBuilder::INFO_FILE, $stamp);
    }

    public function push()
    {
        foreach ($this->getTargetRepositories() as $alias) {
            $repo = DockerBuilder::getRepository($alias);
            if (false === $repo) {
                DockerBuilder::warn("repository '$alias' unknown, skipping");
            } else {
                // TODO $repo shuld be object and it should handle push steps
                $name = escapeshellarg($this->_name);
                $targetName = escapeshellarg(($repo ? $repo . DIRECTORY_SEPARATOR : '') . $this->_name);
                $tags = ['latest'];
                if ($this->_pushTagFrom) {
                    $json = "";
                    $this->_exec('docker inspect -f "{{ json .Config.Env }}" ' . $name, $json);
                    $json = json_decode($json);
                    $c = $this->_pushTagFrom . '=';
                    $l = strlen($c);
                    $json = array_reduce($json, function ($carry, $item) use ($l, $c) {
                        if (substr($item, 0, $l) === $c) {
                            return substr($item, $l);
                        }
                        return $carry;
                    });
                    $tags[] = $json;
                }
                foreach ($tags as $tag) {
                    DockerBuilder::info("process repository tag '$tag'");
                    $this->_exec("docker tag -f $name $targetName:$tag");
                    $this->_exec("docker push $targetName:$tag");
                }
            }
        }
    }

    public function _exec($cmd, &$out = null)
    {
        // http://stackoverflow.com/questions/692000/how-do-i-write-stderr-to-a-file-while-using-tee-with-a-pipe
//        $buildLog = fopen("buildLog", "w");
        $def = array(
//            0 => array("pipe", "r"),  // stdin
            1 => array("pipe", "w"),  // stdout
            2 => array("pipe", "w")   // stderr ?? instead of a file
//            3 => $buildLog
        );

        $ok = true;
        $process = proc_open($cmd, $def, $pipes);
        if (is_resource($process)) {
//            fwrite($pipes[0], $plain_text);
//            fclose($pipes[0]);
            while ($s = fgets($pipes[1], 1024)) {
                if (!is_null($out)) {
                    $out .= $s;
                } else {
                    // TODO output only steps
//                if (preg_match('/^Step \d+ :/', $s)) {
                    echo $s;
//                }
                }
            }
            fclose($pipes[1]);

            while ($s = fgets($pipes[2], 1024)) {
                if (!$ok) {
                    $ok = false;
                    echo "!!!!!!!!!!!!!!!!!!!!!!!!\n";
                }
                echo $s;
            }
            fclose($pipes[2]);
        }
//        fclose($buildLog);

        $ret = proc_close($process);
        if ($ret) {
            throw new DockerException("ERROR in: $cmd");
        }

        return $ok;
    }

    private function _getDockerfilePath()
    {
        return $this->_folder . '/Dockerfile';
    }

    public function getContextTs()
    {
        $ts = 0;
        $files = $this->getContextFiles();
        if (array_key_exists($this->_folder . DIRECTORY_SEPARATOR . DockerBuilder::INFO_FILE, $files)) {
            unset($files[$this->_folder . DIRECTORY_SEPARATOR . DockerBuilder::INFO_FILE]);
        }
        foreach ($files as $file) {
            if (is_file($file)) {
                $ts = max($ts, filemtime($file));
            }
        }

        return $ts;
    }

    private function getContextFiles()
    {
        // based on http://stackoverflow.com/questions/19981583/php-filtering-files-and-paths-according-gitignore
        $dir = $this->_folder;
        $matches = [];
        // TODO we need to do nested directory search !!!
        foreach (glob("$dir/{,.}*", GLOB_BRACE) as $m) {
            if (!in_array($m, ["$dir/.", "$dir/..", "$dir/.dockerignore", "$dir/" . DockerBuilder::INFO_FILE])) {
                $matches[] = $m;
            }
        };


        if (file_exists($dir . '/.dockerignore')) {
            $lines = file($dir . '/.dockerignore');
        } else {
            $lines = [];
        }
        foreach ($lines as $line) {
            $line = trim($line);
            if ($line === '') continue;                 # empty line
            if (substr($line, 0, 1) == '#') continue;   # a comment
            if (substr($line, 0, 1) == '!') {           # negated glob
                $line = substr($line, 1);
                $files = array_diff(glob("$dir/*"), glob("$dir/$line"));
            } else {                                    # normal glob
                $files = glob("$dir/$line");
            }
            $matches = array_merge($matches, $files);
        }
        return $matches;
    }

    public function getTargetRepositories()
    {
        return $this->_repoAliases;
    }

    public function getName()
    {
        return $this->_name;
    }
}

class ImageName
{
    public $repository;
    public $user;
    public $name;
    public $tag;
    public $digest;

    public function __construct($imageName)
    {
        $s = $imageName;
        $w = explode(":", $s, 2);
        if (count($w) > 1) {
            $s = $w[0];
            $this->tag = $w[1];
        } else {
            $w = explode("@", $s, 2);
            if (count($w) > 1) {
                $s = $w[0];
                $this->digest = $w[1];
            }
        }

        $w = explode("/", $s);
        switch (count($w)) {
            case 1:
                $this->name = $w[0];
                break;
            case 2:
                $this->user = $w[0];
                $this->name = $w[1];
                break;
            case 3:
                $this->repository = $w[0];
                $this->user = $w[1];
                $this->name = $w[2];
                break;
            default:
                throw new DockerException("wrong image name format: '$imageName'");
        }
    }

    public function getName()
    {
        // TODO not correct
        return ($this->user ? $this->user . DIRECTORY_SEPARATOR : '') . $this->name . ($this->tag ? ':' . $this->tag : '');
    }

    public function __toString()
    {
        return $this->getName();
    }
}

class DockerException extends Exception
{

}

class BuilderInfo
{
    /**
     * Timestamp of latest changed file in context
     * @var
     */
    var $ts;
    /**
     * Unique digest value of the image
     * @var
     */
    var $digest;
    /**
     * Unique digest value of the parent image on last build
     * @var
     */
    var $parent;

    public static function load($buildTsFn)
    {
        $lines = @file($buildTsFn);
        $r = new self();
        $r->ts = count($lines) > 0 ? trim($lines[0]) : null;
        $r->parent = count($lines) > 1 ? trim($lines[1]) : null;

        return $r;
    }

    public static function update($buildTsFn, $values)
    {
        $info = self::load($buildTsFn);
        foreach ($values as $k => $v) {
            $info->$k = $v;
        }
        $info->save($buildTsFn);
    }

    public function save($buildTsFn)
    {
        $f = fopen($buildTsFn, "w");
        fputs($f, $this->ts . "\n");
        fputs($f, $this->parent . "\n");
        fclose($f);
    }
}

// TODO support tagging
